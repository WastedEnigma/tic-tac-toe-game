import java.util.Scanner;

public class Application {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String answer;

        do {
            System.out.print("Would you like to play with a friend(f) or a computer(c)? (to finish the game type \"ex\") ");
            answer = sc.nextLine();

            switch (answer) {
                case "f":
                    playWithFriend();
                    break;
                case "c":
                    playWithComputer();
                    break;
                default:
                    if (!answer.equals("ex"))
                        System.out.println("Invalid answer: should be \"f\" or \"c\"");
                    break;
            }
        } while (!answer.equals("ex"));
    }

    private static void playWithFriend() {
        Scanner sc = new Scanner(System.in);
        String player1Name, player2Name;

        System.out.print("Enter name of the 1st player: ");
        player1Name = sc.nextLine();
        System.out.print("Enter name of the 2nd player: ");
        player2Name = sc.nextLine();

        // starting the game with friend
        playTicTacToe(player1Name, player2Name);
    }

    private static void playWithComputer() {
        Scanner sc = new Scanner(System.in);
        String playerName;

        System.out.print("Enter your name: ");
        playerName = sc.nextLine();

        // starting the game with computer
        playTicTacToe(playerName);
    }

    // tic-tac-toe method with a friend
    private static void playTicTacToe(String name1, String name2) {
        boolean gameOver = false;
        int size = getBoardSize();
        String[][] board = new String[size][size]; // creating board

        while (!gameOver) {
            String symbol = getSymbol();

            // quit to the starting point when q entered
            if (symbol.equals("q"))
                break;

            int x = getCoordinate(board);
            int y = getCoordinate(board);

            putSymbolOnBoard(board, x, y, symbol);
            displayBoard(board);

            if (isGameOver(board)) {
                gameOver = true;
                displayGameResults(name1, name2, symbol, board);
            }
        }
    }

    // tic-tac-toe method with a computer
    private static void playTicTacToe(String name) {
        boolean gameOver = false;
        int size = getBoardSize();
        int x, y;
        String[][] board = new String[size][size];
        int[] position;
        String symbol;

        while (!gameOver) {
            symbol = getSymbol();

            if (symbol.equals("q"))
                break;

            if (symbol.equals("x")) {
                x = getCoordinate(board);
                y = getCoordinate(board);
                putSymbolOnBoard(board, x, y, symbol);

                if (!isGameOver(board)) {
                    position = getBestPosition(board);
                    x = position[0];
                    y = position[1];
                    symbol = "0";
                    putSymbolOnBoard(board, x, y, symbol);
                }

                displayBoard(board);
            } else if (symbol.equals("0")) {
                System.out.println("Invalid symbol: 0 is generated by computer player");
            }

            if (isGameOver(board)) {
                gameOver = true;
                displayGameResults(name, "Computer", symbol, board);
            }
        }
    }

    // method checks if board size is valid and returns it if true
    private static int getBoardSize() {
        Scanner sc = new Scanner(System.in);
        int size;

        System.out.print("Enter the size of the board (integer, range[3-20]): ");

        if (sc.hasNextInt()) {
            size = sc.nextInt();

            if (size > 2 && size <= 20)
                return size;
            else {
                System.out.println("Invalid size: should be between 3 and 20");
                return getBoardSize();
            }
        }
        System.out.println("Invalid size: should be integer");

        return getBoardSize();
    }

    // method checks if symbol is valid and returns it if true
    private static String getSymbol() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter symbol (press q to quit): ");
        String symbol = sc.nextLine();

        if (symbol.equals("x") || symbol.equals("0") || symbol.equals("q"))
            return symbol;

        System.out.println("Invalid symbol: should be x or 0");

        return getSymbol();
    }

    // method checks if coordinate is valid an returns it if true
    private static int getCoordinate(String[][] board) {
        Scanner sc = new Scanner(System.in);
        int coordinate;

        System.out.print("Enter coordinate (row, column): ");

        if (sc.hasNextInt()) {
            coordinate = sc.nextInt();
            if (coordinate >= 0 && coordinate < board.length)
                return coordinate;
            else {
                System.out.println("Invalid coordinates: should be between 0 and " + (board.length - 1));
                return getCoordinate(board);
            }
        }
        System.out.println("Invalid coordinates: should be integer");

        return getCoordinate(board);
    }

    // method stores entered symbol on the board according with x and y
    private static void putSymbolOnBoard(String[][] board, int x, int y, String symbol) {
        if (board[x][y] == null)
            board[x][y] = symbol;
    }

    // method analyzes the board searching for the most optimal position
    // (unbeatable AI if [3x3] board is used)
    private static int[] getBestPosition(String[][] board) {
        int x = getAvailableSpots(board)[0];
        int y = getAvailableSpots(board)[1];
        int lastIndex = board.length - 1;
        int midIndex = (board.length - 1) / 2;

        // logic for blocking the opponent diagonally
        // --------------------------------------------------------
        for (int i = 0, j = 1; i < board.length - 2; i++, j++) {
            if (board[0][0] != null && board[i + 1][i + 1] != null) {
                if (board[0][0].equals("x")
                        && board[i + 1][i + 1].equals("x")
                        && board[i + 2][i + 2] == null) {
                    return new int[] { i + 2, i + 2 };
                } else if (board[0][0].equals("0")
                        && board[i + 1][i + 1].equals("0")
                        && board[i + 2][i + 2] == null) {
                    return new int[] { i + 2, i + 2 };
                }
            } else if (board[0][lastIndex] != null && board[i + 1][lastIndex - j] != null) {
                if (board[0][lastIndex].equals("x")
                        && board[i + 1][lastIndex - j].equals("x")
                        && board[i + 2][lastIndex - (j + 1)] == null) {
                    return new int[] { i + 2, lastIndex - (j + 1) };
                } else if (board[0][lastIndex].equals("0")
                        && board[i + 1][lastIndex - j].equals("0")
                        && board[i + 2][lastIndex - (j + 1)] == null) {
                    return new int[] { i + 2, lastIndex - (j + 1) };
                }
            } else if (board[lastIndex][0] != null && board[lastIndex - j][j] != null) {
                if (board[lastIndex][0].equals("x")
                        && board[lastIndex - j][j].equals("x")
                        && board[lastIndex - (j + 1)][j + 1] == null) {
                    return new int[] { lastIndex - (j + 1), j + 1 };
                } else if (board[lastIndex][0].equals("0")
                        && board[lastIndex - j][j].equals("0")
                        && board[lastIndex - (j + 1)][j + 1] == null) {
                    return new int[] { lastIndex - (j + 1), j + 1 };
                }
            }
        }

        if (board[0][0] != null && board[lastIndex][lastIndex] != null) {
            if (board[0][0].equals("x")
                    && board[lastIndex][lastIndex].equals("x")
                    && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            } else if (board[0][0].equals("0")
                    && board[lastIndex][lastIndex].equals("0")
                    && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        } else if (board[0][lastIndex] != null && board[lastIndex][0] != null) {
            if (board[0][lastIndex].equals("x")
                    && board[lastIndex][0].equals("x")
                    && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            } else if (board[0][lastIndex].equals("0")
                    && board[lastIndex][0].equals("0")
                    && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        }

        if (board[midIndex][midIndex] != null && board[midIndex - 1][midIndex + 1] != null) {
            if (board[midIndex][midIndex].equals("x")
                    && board[midIndex - 1][midIndex + 1].equals("x")
                    && board[midIndex + 1][midIndex - 1] == null) {
                return new int[] { midIndex + 1, midIndex - 1 };
            } else if (board[midIndex][midIndex].equals("0")
                    && board[midIndex - 1][midIndex + 1].equals("0")
                    && board[midIndex + 1][midIndex - 1] == null) {
                return new int[] { midIndex + 1, midIndex - 1 };
            }
        } else if (board[midIndex][midIndex] != null && board[midIndex + 1][midIndex - 1] != null) {
            if (board[midIndex][midIndex].equals("x")
                    && board[midIndex + 1][midIndex - 1].equals("x")
                    && board[midIndex - 1][midIndex + 1] == null) {
                return new int[] { midIndex - 1, midIndex + 1 };
            } else if (board[midIndex][midIndex].equals("0")
                    && board[midIndex + 1][midIndex - 1].equals("0")
                    && board[midIndex - 1][midIndex + 1] == null) {
                return new int[] { midIndex - 1, midIndex + 1 };
            }
        }
        // --------------------------------------------------------

        // logic for blocking the opponent horizontally
        // --------------------------------------------------------
        for (int i = 0; i < board.length; i++) {
            for (int j = 0, k = 1; j < board[i].length - 2; j++, k++) {
                if (board[i][j] != null && board[i][j + 1] != null) {
                    if (board[i][j].equals("x")
                            && board[i][j + 1].equals("x")
                            && board[i][j + 2] == null) {
                        return new int[] { i, j + 2 };
                    } else if (board[i][j].equals("0")
                            && board[i][j + 1].equals("0")
                            && board[i][j + 2] == null) {
                        return new int[] { i, j + 2 };
                    }
                } else if (board[i][lastIndex] != null && board[i][lastIndex - k] != null) {
                    if (board[i][lastIndex].equals("x")
                            && board[i][lastIndex - k].equals("x")
                            && board[i][lastIndex - (k + 1)] == null) {
                        return new int[] { i, lastIndex - (k + 1) };
                    } else if (board[i][lastIndex].equals("0")
                            && board[i][lastIndex - k].equals("0")
                            && board[i][lastIndex - (k + 1)] == null) {
                        return new int[] { i, lastIndex - (k + 1) };
                    }
                } else if (board[i][j] != null && board[i][lastIndex] != null) {
                    if (board[i][j].equals("x")
                            && board[i][lastIndex].equals("x")
                            && board[i][midIndex] == null) {
                        return new int[] { i, midIndex };
                    } else if (board[i][j].equals("0")
                            && board[i][lastIndex].equals("0")
                            && board[i][midIndex] == null) {
                        return new int[] { i, midIndex };
                    }
                }
            }
        }
        // --------------------------------------------------------

        // logic for blocking the opponent vertically
        // --------------------------------------------------------
        for (int i = 0; i < board.length; i++) {
            for (int j = 0, k = 1; j < board[i].length - 2; j++, k++) {
                if (board[j][i] != null && board[j + 1][i] != null) {
                    if (board[j][i].equals("x")
                            && board[j + 1][i].equals("x")
                            && board[j + 2][i] == null) {
                        return new int[] { j + 2, i };
                    } else if (board[j][i].equals("0")
                            && board[j + 1][i].equals("0")
                            && board[j + 2][i] == null) {
                        return new int[] { j + 2, i };
                    }
                } else if (board[lastIndex][i] != null && board[lastIndex - k][i] != null) {
                    if (board[lastIndex][i].equals("x")
                            && board[lastIndex - k][i].equals("x")
                            && board[lastIndex - (k + 1)][i] == null) {
                        return new int[] { lastIndex - (k + 1), i };
                    } else if (board[lastIndex][i].equals("0")
                            && board[lastIndex - k][i].equals("0")
                            && board[lastIndex - (k + 1)][i] == null) {
                        return new int[] { lastIndex - (k + 1), i };
                    }
                } else if (board[j][i] != null && board[lastIndex][i] != null) {
                    if (board[j][i].equals("x")
                            && board[lastIndex][i].equals("x")
                            && board[midIndex][i] == null) {
                        return new int[] { midIndex, i };
                    } else if (board[j][i].equals("0")
                            && board[lastIndex][i].equals("0")
                            && board[midIndex][i] == null) {
                        return new int[] { midIndex, i };
                    }
                }
            }
        }
        // --------------------------------------------------------

        // additional logic for other occasions
        // --------------------------------------------------------
        if (board[0][0] != null) {
            if (board[0][0].equals("x") && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        } else if (board[0][lastIndex] != null) {
            if (board[0][lastIndex].equals("x") && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        } else if (board[lastIndex][lastIndex] != null) {
            if (board[lastIndex][lastIndex].equals("x") && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        } else if (board[lastIndex][0] != null) {
            if (board[lastIndex][0].equals("x") && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        } else if (board[0][midIndex] != null) {
            if (board[0][midIndex].equals("x") && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        } else if (board[midIndex][lastIndex] != null) {
            if (board[midIndex][lastIndex].equals("x") && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        } else if (board[lastIndex][midIndex] != null) {
            if (board[lastIndex][midIndex].equals("x") && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        } else if (board[midIndex][0] != null) {
            if (board[midIndex][0].equals("x") && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        }

        if (board[lastIndex][midIndex] != null && board[midIndex][lastIndex] != null) {
            if (board[lastIndex][midIndex].equals("x")
                    && board[midIndex][lastIndex].equals("x")
                    && board[0][lastIndex] == null) {
                return new int[] { 0, lastIndex };
            }
        } else if (board[lastIndex][midIndex] != null && board[midIndex][0] != null) {
            if (board[lastIndex][midIndex].equals("x")
                    && board[midIndex][0].equals("x")
                    && board[midIndex][midIndex] == null) {
                return new int[] { midIndex, midIndex };
            }
        }

        if (board[lastIndex][0] != null && board[midIndex][lastIndex] != null) {
            if (board[lastIndex][0].equals("x")
                    && board[midIndex][lastIndex].equals("x")
                    && board[lastIndex][lastIndex] == null) {
                return new int[] { lastIndex, lastIndex };
            }
        }
        // --------------------------------------------------------

        return new int[] { x, y };
    }

    // method for getting x and y if there's free spots left
    private static int[] getAvailableSpots(String[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == null)
                    return new int[]{ i, j };
            }
        }

        return new int[] {};
    }

    // method displays game board on the screen
    private static void displayBoard(String[][] board) {
        System.out.println();
        for (String[] row : board) {
            for (String elem : row) {
                if (elem != null) {
                    System.out.print(String.format("[%s]", elem));
                } else {
                    System.out.print("[ ]");
                }
            }
            System.out.println();
        }
        System.out.println();
    }

    // method checks all possible game ending occasions
    private static boolean isGameOver(String[][] board) {
        return isRowCrossed(board) || isColumnCrossed(board) || isDiagonalCrossed(board) || isBoardFilled(board);
    }

    // methods to check whether the 'x' or '0' were fully crossed
    // horizontally, vertically, diagonally or none of the below
    // (the board completely filled with symbols)
    // --------------------------------------------------------
    private static boolean isRowCrossed(String[][] board) {
        boolean checkedRows = false;
        int counter;

        for (String[] row : board) {
            counter = 0; // reset row counter

            for (int j = 0; j < row.length - 1; j++) {
                if (row[j] != null) {
                    if (row[j].equals(row[j + 1])) {
                        checkedRows = true;
                        counter++;
                    }

                    if (counter != board.length - 1) {
                        checkedRows = false;
                    }
                }
            }

            if (checkedRows)
                break;
        }

        return checkedRows;
    }

    private static boolean isColumnCrossed(String[][] board) {
        boolean checkedColumns = false;
        int counter;

        for (int i = 0; i < board.length; i++) {
            counter = 0; // reset column counter

            for (int j = 0; j < board[i].length - 1; j++) {
                if (board[j][i] != null) {
                    if (board[j][i].equals(board[j + 1][i])) {
                        checkedColumns = true;
                        counter++;
                    }

                    if (counter != board.length - 1) {
                        checkedColumns = false;
                    }
                }
            }

            if (checkedColumns)
                break;
        }

        return checkedColumns;
    }

    private static boolean isDiagonalCrossed(String[][] board) {
        boolean checkedFirstDiagonal = false;
        int counter = 0;

        for (int i = 0; i < board.length - 1; i++) {
            checkedFirstDiagonal = false;

            if (board[0][0] != null) {
                if (board[0][0].equals(board[i + 1][i + 1])) {
                    checkedFirstDiagonal = true;
                    counter++;
                }

                if (counter != board.length - 1) {
                    checkedFirstDiagonal = false;
                }
            }
        }

        boolean checkedSecondDiagonal = false;
        counter = 0; // reset counter

        for (int i = 0; i < board.length; i++) {
            checkedSecondDiagonal = false;
            int lastIndex = board.length - 1;

            if (board[lastIndex][0] != null) {
                if (board[lastIndex][0].equals(board[lastIndex - i][i])) {
                    checkedSecondDiagonal = true;
                    counter++;
                }

                if (counter != board.length) {
                    checkedSecondDiagonal = false;
                }
            }
        }

        return checkedFirstDiagonal || checkedSecondDiagonal;
    }

    private static boolean isBoardFilled(String[][] board) {
        int size = board.length * board.length;
        int symbolCount = 0;

        for (String[] row : board) {
            for (String elem : row) {
                if (elem != null)
                    symbolCount++;
            }
        }

        return symbolCount == size;
    }
    // --------------------------------------------------------

    private static void displayGameResults(String name1, String name2, String symbol, String[][] board) {
        int player1Score = getPlayer1Score(symbol, board);
        int player2Score = getPlayer2Score(symbol, board);

        if (player1Score > player2Score) {
            System.out.println(name1 + " won");
        } else if (player1Score == player2Score) {
            System.out.println("Tie game");
        } else {
            System.out.println(name2 + " won");
        }

        System.out.println("Game Over");
        System.out.println();
    }

    private static int getPlayer1Score(String symbol, String[][] board) {
        if (!isRowCrossed(board) && !isColumnCrossed(board) && !isDiagonalCrossed(board))
            return 0;

        if (symbol.equals("x"))
            return 1;

        return -1;
    }

    private static int getPlayer2Score(String symbol, String[][] board) {
        if (!isRowCrossed(board) && !isColumnCrossed(board) && !isDiagonalCrossed(board))
            return 0;

        if (symbol.equals("0"))
            return 1;

        return -1;
    }
}
